@startuml

actor Player1 as pl1
participant MetaServer as ms

database MetaDB as db
participant GameServer as gs
actor Player2 as pl2

== Match registration ==
par
autonumber
pl1 -[#green]> ms: Register(player_id, password)
ms -[#green]> db: GetPlayer(player_id)
ms <[#green]- db: Player object{player_id, password, player_status}
ms -[#green]> ms:  Verify password
ms -[#green]> ms:  Verify that player_status is "not_in_game"
    ms -[#green]> gs: Register a player(player_id).
    note right: Assuming that a Game Server has \nconfigured Max number of match slots.
    gs -[#green]> gs: Check if match slots with a second player \n exist and register the player to it. \n If no slots with a second player avaliable, register to a new slot\n
    activate gs
    note over gs #FFAAAA: Start a match slot waitForPlayers timer\n2 min
    gs -[#green]> ms: Player registered (player_id, slot_id)
    autonumber stop
    par
      autonumber 9
      ms -[#green]> db: Update player status to "registered"(player_id)
    else
      autonumber 9
      ms -[#green]> pl1: Registered(game_server_url, slot_id)
    end
    autonumber stop
else
autonumber
pl2 -[#blue]> ms: Register(player_id, password)
ms -[#blue]> db: GetPlayer(player_id)
ms <[#blue]- db: Player object{player_id, password, player_status}
ms -[#blue]> ms:  Verify password
ms -[#blue]> ms:  Verify that player_status is "not_in_game"
    ms -[#blue]> gs: Register a player(player_id)
    gs -[#blue]> gs: Check if match slots with a second player \n exist and register the player to it. \n If no slots with a second player avaliable, register to a new slot\n

    gs -[#blue]> ms: Player registered (player_id, slot_id)
    par
      autonumber 9
      ms -[#blue]> db: Update player status to "registered"(player_id)
    else
      autonumber 9
      ms -[#blue]> pl2: Registered(game_server_url, slot_id)
    end
end
== Match initialization ==
par
  autonumber 10
  pl1 -> gs: WS: StartGame(player_id, slot_id)
else
  autonumber 10
  pl2 -> gs: WS: StartGame(player_id, slot_id)
end
gs -> db: Update player1 and player2 status \n to "in_game"
note over gs #FFAAAA: Stop a waitForPlayers timer
deactivate gs
== The game ==
gs -> gs: Randomly select who will be first.
gs -> pl1: WS: Your move
activate gs
note over gs #FFAAAA: Start wait for game start timer: 30 sec


loop 3 times
  pl1 -[#green]> gs: WS: Move
  deactivate gs
  note over gs #FFAAAA: Stop wait for game start timer: 30 sec
    par
      autonumber 15
      gs -> gs: Save move to RAM
      activate gs
    else
      autonumber 15
      note over gs #FFAAAA: Start wait for move timer \n 30 sec
      gs -[#blue]> pl2: WS: Game status
    end
  pl2 -[#blue]> gs: WS: Move
    par
      autonumber 17
      gs -> gs: Save move to RAM
      deactivate gs
      note over gs #FFAAAA: Stop wait for move timer
    else
      autonumber 17
      gs -[#green]> pl1: WS: Game status
    end
  deactivate gs
  end

gs -> gs: Calculate game results

== End game ==
par
autonumber 19
gs -> db: Save game results
else
autonumber 19
gs -[#green]> pl1: WS: Send game results
else
autonumber 19
gs -[#blue]> pl2: WS: Send game results
else
autonumber 19
gs -> db: Update player1 andd player2 status\n to "not_in_game"       
end
gs -> gs: Mark a match slot as "Free"(slot_id)
@enduml